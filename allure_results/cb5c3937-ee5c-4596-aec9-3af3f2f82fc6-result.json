{"name": "Проверка увеличения числа заказов за сегодня при создании заказа", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=119.0.6045.160)\nStacktrace:\n\tGetHandleVerifier [0x00007FF79D5682B2+55298]\n\t(No symbol) [0x00007FF79D4D5E02]\n\t(No symbol) [0x00007FF79D3905AB]\n\t(No symbol) [0x00007FF79D370038]\n\t(No symbol) [0x00007FF79D3F6BC7]\n\t(No symbol) [0x00007FF79D40A15F]\n\t(No symbol) [0x00007FF79D3F1E83]\n\t(No symbol) [0x00007FF79D3C670A]\n\t(No symbol) [0x00007FF79D3C7964]\n\tGetHandleVerifier [0x00007FF79D8E0AAB+3694587]\n\tGetHandleVerifier [0x00007FF79D93728E+4048862]\n\tGetHandleVerifier [0x00007FF79D92F173+4015811]\n\tGetHandleVerifier [0x00007FF79D6047D6+695590]\n\t(No symbol) [0x00007FF79D4E0CE8]\n\t(No symbol) [0x00007FF79D4DCF34]\n\t(No symbol) [0x00007FF79D4DD062]\n\t(No symbol) [0x00007FF79D4CD3A3]\n\tBaseThreadInitThunk [0x00007FF9706E7344+20]\n\tRtlUserThreadStart [0x00007FF971FE26B1+33]", "trace": "browser = 'chrome'\n\n    @allure.step('Открытие выбранного браузера на главной странице сайта с предварительной авторизацией юзера')\n    @pytest.fixture\n    def main_page_logged_in(browser):\n        access_token, email, user, password = helper.create_user()\n        if browser == \"chrome\":\n            driver = webdriver.Chrome()\n        elif browser == \"firefox\":\n            driver = webdriver.Firefox()\n        driver.get(Urls.login_page)\n        page = LoginPage(driver)\n>       page.wait_for_overlay_disappear()\n\nconftest.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_page.py:13: in wait_for_overlay_disappear\n    self.wait_for_invisibility_of_element_located(LoginPageLocators.MODAL_OVERLAY)\npages\\base_page.py:40: in wait_for_invisibility_of_element_located\n    WebDriverWait(self.driver, 5).until(expected_conditions.invisibility_of_element_located((By.XPATH, element)))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:325: in _predicate\n    target = driver.find_element(*target)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024F466B2990>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF79D4CD3A3]\\\\n\\\\tBaseThreadInitThunk [0x00007FF9706E7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF971FE26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=119.0.6045.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF79D5682B2+55298]\nE       \t(No symbol) [0x00007FF79D4D5E02]\nE       \t(No symbol) [0x00007FF79D3905AB]\nE       \t(No symbol) [0x00007FF79D370038]\nE       \t(No symbol) [0x00007FF79D3F6BC7]\nE       \t(No symbol) [0x00007FF79D40A15F]\nE       \t(No symbol) [0x00007FF79D3F1E83]\nE       \t(No symbol) [0x00007FF79D3C670A]\nE       \t(No symbol) [0x00007FF79D3C7964]\nE       \tGetHandleVerifier [0x00007FF79D8E0AAB+3694587]\nE       \tGetHandleVerifier [0x00007FF79D93728E+4048862]\nE       \tGetHandleVerifier [0x00007FF79D92F173+4015811]\nE       \tGetHandleVerifier [0x00007FF79D6047D6+695590]\nE       \t(No symbol) [0x00007FF79D4E0CE8]\nE       \t(No symbol) [0x00007FF79D4DCF34]\nE       \t(No symbol) [0x00007FF79D4DD062]\nE       \t(No symbol) [0x00007FF79D4CD3A3]\nE       \tBaseThreadInitThunk [0x00007FF9706E7344+20]\nE       \tRtlUserThreadStart [0x00007FF971FE26B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "description": "Взять число заказов за всё время из Ленты заказов, создать новый заказ и проверить новое число заказов за сегодня", "start": 1704993188130, "stop": 1704993188130, "uuid": "a6baafe4-e253-4f58-a8f7-aa4058636897", "historyId": "b164e2a3187e4bcc1fb014214a0ea2d4", "testCaseId": "b164e2a3187e4bcc1fb014214a0ea2d4", "fullName": "tests.test_feed.TestFeed#test_today_orders_counters_increase_after_creating_order", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_feed"}, {"name": "subSuite", "value": "TestFeed"}, {"name": "host", "value": "ARSENIY-PC"}, {"name": "thread", "value": "43632-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_feed"}]}